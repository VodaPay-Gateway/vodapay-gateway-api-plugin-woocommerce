<?php
/**
 * VodaPayGatewayRecurring
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  VodaPayGatewayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use \ArrayAccess;
use \VodaPayGatewayClient\ObjectSerializer;

/**
 * VodaPayGatewayRecurring Class Doc Comment
 *
 * @category Class
 * @package  VodaPayGatewayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class VodaPayGatewayRecurring implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VodaPayGatewayRecurring';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'echo_data' => 'string',
        'trace_id' => 'string',
        'amount' => 'int',
        'customer_id' => 'string',
        'digital_wallet_id' => 'string',
        'additional_data' => 'string',
        'notifications' => '\VodaPayGatewayClient\Model\Notifications',
        'styling' => '\VodaPayGatewayClient\Model\Styling',
        'basket' => '\VodaPayGatewayClient\Model\BasketItems[]',
        'communication' => '\VodaPayGatewayClient\Model\Communication',
        'recurring' => '\VodaPayGatewayClient\Model\Recurring'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'echo_data' => null,
        'trace_id' => null,
        'amount' => 'int32',
        'customer_id' => null,
        'digital_wallet_id' => null,
        'additional_data' => null,
        'notifications' => null,
        'styling' => null,
        'basket' => null,
        'communication' => null,
        'recurring' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'echo_data' => 'echoData',
        'trace_id' => 'traceId',
        'amount' => 'amount',
        'customer_id' => 'customerId',
        'digital_wallet_id' => 'digitalWalletId',
        'additional_data' => 'additionalData',
        'notifications' => 'notifications',
        'styling' => 'styling',
        'basket' => 'basket',
        'communication' => 'communication',
        'recurring' => 'recurring'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'echo_data' => 'setEchoData',
        'trace_id' => 'setTraceId',
        'amount' => 'setAmount',
        'customer_id' => 'setCustomerId',
        'digital_wallet_id' => 'setDigitalWalletId',
        'additional_data' => 'setAdditionalData',
        'notifications' => 'setNotifications',
        'styling' => 'setStyling',
        'basket' => 'setBasket',
        'communication' => 'setCommunication',
        'recurring' => 'setRecurring'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'echo_data' => 'getEchoData',
        'trace_id' => 'getTraceId',
        'amount' => 'getAmount',
        'customer_id' => 'getCustomerId',
        'digital_wallet_id' => 'getDigitalWalletId',
        'additional_data' => 'getAdditionalData',
        'notifications' => 'getNotifications',
        'styling' => 'getStyling',
        'basket' => 'getBasket',
        'communication' => 'getCommunication',
        'recurring' => 'getRecurring'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['echo_data'] = $data['echo_data'] ?? null;
        $this->container['trace_id'] = $data['trace_id'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['digital_wallet_id'] = $data['digital_wallet_id'] ?? null;
        $this->container['additional_data'] = $data['additional_data'] ?? null;
        $this->container['notifications'] = $data['notifications'] ?? null;
        $this->container['styling'] = $data['styling'] ?? null;
        $this->container['basket'] = $data['basket'] ?? null;
        $this->container['communication'] = $data['communication'] ?? null;
        $this->container['recurring'] = $data['recurring'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets echo_data
     *
     * @return string|null
     */
    public function getEchoData()
    {
        return $this->container['echo_data'];
    }

    /**
     * Sets echo_data
     *
     * @param string|null $echo_data echo_data
     *
     * @return self
     */
    public function setEchoData($echo_data)
    {
        $this->container['echo_data'] = $echo_data;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string|null
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string|null $trace_id trace_id
     *
     * @return self
     */
    public function setTraceId($trace_id)
    {
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets digital_wallet_id
     *
     * @return string|null
     */
    public function getDigitalWalletId()
    {
        return $this->container['digital_wallet_id'];
    }

    /**
     * Sets digital_wallet_id
     *
     * @param string|null $digital_wallet_id digital_wallet_id
     *
     * @return self
     */
    public function setDigitalWalletId($digital_wallet_id)
    {
        $this->container['digital_wallet_id'] = $digital_wallet_id;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return string|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param string|null $additional_data additional_data
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \VodaPayGatewayClient\Model\Notifications|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \VodaPayGatewayClient\Model\Notifications|null $notifications notifications
     *
     * @return self
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets styling
     *
     * @return \VodaPayGatewayClient\Model\Styling|null
     */
    public function getStyling()
    {
        return $this->container['styling'];
    }

    /**
     * Sets styling
     *
     * @param \VodaPayGatewayClient\Model\Styling|null $styling styling
     *
     * @return self
     */
    public function setStyling($styling)
    {
        $this->container['styling'] = $styling;

        return $this;
    }

    /**
     * Gets basket
     *
     * @return \VodaPayGatewayClient\Model\BasketItems[]|null
     */
    public function getBasket()
    {
        return $this->container['basket'];
    }

    /**
     * Sets basket
     *
     * @param \VodaPayGatewayClient\Model\BasketItems[]|null $basket basket
     *
     * @return self
     */
    public function setBasket($basket)
    {
        $this->container['basket'] = $basket;

        return $this;
    }

    /**
     * Gets communication
     *
     * @return \VodaPayGatewayClient\Model\Communication|null
     */
    public function getCommunication()
    {
        return $this->container['communication'];
    }

    /**
     * Sets communication
     *
     * @param \VodaPayGatewayClient\Model\Communication|null $communication communication
     *
     * @return self
     */
    public function setCommunication($communication)
    {
        $this->container['communication'] = $communication;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return \VodaPayGatewayClient\Model\Recurring|null
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param \VodaPayGatewayClient\Model\Recurring|null $recurring recurring
     *
     * @return self
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


