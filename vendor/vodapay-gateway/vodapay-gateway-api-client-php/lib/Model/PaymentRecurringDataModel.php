<?php
/**
 * PaymentRecurringDataModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  VodaPayGatewayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use \ArrayAccess;
use \VodaPayGatewayClient\ObjectSerializer;

/**
 * PaymentRecurringDataModel Class Doc Comment
 *
 * @category Class
 * @package  VodaPayGatewayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentRecurringDataModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentRecurringDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recurring_payment_category' => '\VodaPayGatewayClient\Model\RecurringPaymentCategory',
        'payment_frequency' => '\VodaPayGatewayClient\Model\RecurringPaymentFrequencyCodes',
        'first_payment_date' => '\DateTime',
        'last_payment_date' => '\DateTime',
        'number_of_instalments' => 'int',
        'recurring_payment_amount' => 'int',
        'recurring_payment_amount_limit' => 'int',
        'regular_payment_day' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'recurring_payment_category' => null,
        'payment_frequency' => null,
        'first_payment_date' => 'date-time',
        'last_payment_date' => 'date-time',
        'number_of_instalments' => 'int32',
        'recurring_payment_amount' => 'int32',
        'recurring_payment_amount_limit' => 'int32',
        'regular_payment_day' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recurring_payment_category' => 'recurringPaymentCategory',
        'payment_frequency' => 'paymentFrequency',
        'first_payment_date' => 'firstPaymentDate',
        'last_payment_date' => 'lastPaymentDate',
        'number_of_instalments' => 'numberOfInstalments',
        'recurring_payment_amount' => 'recurringPaymentAmount',
        'recurring_payment_amount_limit' => 'recurringPaymentAmountLimit',
        'regular_payment_day' => 'regularPaymentDay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recurring_payment_category' => 'setRecurringPaymentCategory',
        'payment_frequency' => 'setPaymentFrequency',
        'first_payment_date' => 'setFirstPaymentDate',
        'last_payment_date' => 'setLastPaymentDate',
        'number_of_instalments' => 'setNumberOfInstalments',
        'recurring_payment_amount' => 'setRecurringPaymentAmount',
        'recurring_payment_amount_limit' => 'setRecurringPaymentAmountLimit',
        'regular_payment_day' => 'setRegularPaymentDay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recurring_payment_category' => 'getRecurringPaymentCategory',
        'payment_frequency' => 'getPaymentFrequency',
        'first_payment_date' => 'getFirstPaymentDate',
        'last_payment_date' => 'getLastPaymentDate',
        'number_of_instalments' => 'getNumberOfInstalments',
        'recurring_payment_amount' => 'getRecurringPaymentAmount',
        'recurring_payment_amount_limit' => 'getRecurringPaymentAmountLimit',
        'regular_payment_day' => 'getRegularPaymentDay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recurring_payment_category'] = $data['recurring_payment_category'] ?? null;
        $this->container['payment_frequency'] = $data['payment_frequency'] ?? null;
        $this->container['first_payment_date'] = $data['first_payment_date'] ?? null;
        $this->container['last_payment_date'] = $data['last_payment_date'] ?? null;
        $this->container['number_of_instalments'] = $data['number_of_instalments'] ?? null;
        $this->container['recurring_payment_amount'] = $data['recurring_payment_amount'] ?? null;
        $this->container['recurring_payment_amount_limit'] = $data['recurring_payment_amount_limit'] ?? null;
        $this->container['regular_payment_day'] = $data['regular_payment_day'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recurring_payment_category'] === null) {
            $invalidProperties[] = "'recurring_payment_category' can't be null";
        }
        if ($this->container['payment_frequency'] === null) {
            $invalidProperties[] = "'payment_frequency' can't be null";
        }
        if ($this->container['number_of_instalments'] === null) {
            $invalidProperties[] = "'number_of_instalments' can't be null";
        }
        if ($this->container['recurring_payment_amount'] === null) {
            $invalidProperties[] = "'recurring_payment_amount' can't be null";
        }
        if ($this->container['recurring_payment_amount_limit'] === null) {
            $invalidProperties[] = "'recurring_payment_amount_limit' can't be null";
        }
        if ($this->container['regular_payment_day'] === null) {
            $invalidProperties[] = "'regular_payment_day' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recurring_payment_category
     *
     * @return \VodaPayGatewayClient\Model\RecurringPaymentCategory
     */
    public function getRecurringPaymentCategory()
    {
        return $this->container['recurring_payment_category'];
    }

    /**
     * Sets recurring_payment_category
     *
     * @param \VodaPayGatewayClient\Model\RecurringPaymentCategory $recurring_payment_category recurring_payment_category
     *
     * @return self
     */
    public function setRecurringPaymentCategory($recurring_payment_category)
    {
        $this->container['recurring_payment_category'] = $recurring_payment_category;

        return $this;
    }

    /**
     * Gets payment_frequency
     *
     * @return \VodaPayGatewayClient\Model\RecurringPaymentFrequencyCodes
     */
    public function getPaymentFrequency()
    {
        return $this->container['payment_frequency'];
    }

    /**
     * Sets payment_frequency
     *
     * @param \VodaPayGatewayClient\Model\RecurringPaymentFrequencyCodes $payment_frequency payment_frequency
     *
     * @return self
     */
    public function setPaymentFrequency($payment_frequency)
    {
        $this->container['payment_frequency'] = $payment_frequency;

        return $this;
    }

    /**
     * Gets first_payment_date
     *
     * @return \DateTime|null
     */
    public function getFirstPaymentDate()
    {
        return $this->container['first_payment_date'];
    }

    /**
     * Sets first_payment_date
     *
     * @param \DateTime|null $first_payment_date first_payment_date
     *
     * @return self
     */
    public function setFirstPaymentDate($first_payment_date)
    {
        $this->container['first_payment_date'] = $first_payment_date;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime|null $last_payment_date last_payment_date
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets number_of_instalments
     *
     * @return int
     */
    public function getNumberOfInstalments()
    {
        return $this->container['number_of_instalments'];
    }

    /**
     * Sets number_of_instalments
     *
     * @param int $number_of_instalments number_of_instalments
     *
     * @return self
     */
    public function setNumberOfInstalments($number_of_instalments)
    {
        $this->container['number_of_instalments'] = $number_of_instalments;

        return $this;
    }

    /**
     * Gets recurring_payment_amount
     *
     * @return int
     */
    public function getRecurringPaymentAmount()
    {
        return $this->container['recurring_payment_amount'];
    }

    /**
     * Sets recurring_payment_amount
     *
     * @param int $recurring_payment_amount recurring_payment_amount
     *
     * @return self
     */
    public function setRecurringPaymentAmount($recurring_payment_amount)
    {
        $this->container['recurring_payment_amount'] = $recurring_payment_amount;

        return $this;
    }

    /**
     * Gets recurring_payment_amount_limit
     *
     * @return int
     */
    public function getRecurringPaymentAmountLimit()
    {
        return $this->container['recurring_payment_amount_limit'];
    }

    /**
     * Sets recurring_payment_amount_limit
     *
     * @param int $recurring_payment_amount_limit recurring_payment_amount_limit
     *
     * @return self
     */
    public function setRecurringPaymentAmountLimit($recurring_payment_amount_limit)
    {
        $this->container['recurring_payment_amount_limit'] = $recurring_payment_amount_limit;

        return $this;
    }

    /**
     * Gets regular_payment_day
     *
     * @return int
     */
    public function getRegularPaymentDay()
    {
        return $this->container['regular_payment_day'];
    }

    /**
     * Sets regular_payment_day
     *
     * @param int $regular_payment_day regular_payment_day
     *
     * @return self
     */
    public function setRegularPaymentDay($regular_payment_day)
    {
        $this->container['regular_payment_day'] = $regular_payment_day;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


