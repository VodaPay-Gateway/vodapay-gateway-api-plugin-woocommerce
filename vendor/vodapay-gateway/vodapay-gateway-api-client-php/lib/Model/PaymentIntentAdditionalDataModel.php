<?php
/**
 * PaymentIntentAdditionalDataModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  VodaPayGatewayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use \ArrayAccess;
use \VodaPayGatewayClient\ObjectSerializer;

/**
 * PaymentIntentAdditionalDataModel Class Doc Comment
 *
 * @category Class
 * @package  VodaPayGatewayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentIntentAdditionalDataModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentIntentAdditionalDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'basket' => '\VodaPayGatewayClient\Model\PaymentIntentBasketModel',
        'payment_tokens' => '\VodaPayGatewayClient\Model\PaymentTokenDataModel[]',
        'notification_information' => '\VodaPayGatewayClient\Model\PaymentNotificationDataModel',
        'recurring_payment_data' => '\VodaPayGatewayClient\Model\PaymentRecurringDataModel',
        'miscellaneous' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'basket' => null,
        'payment_tokens' => null,
        'notification_information' => null,
        'recurring_payment_data' => null,
        'miscellaneous' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'basket' => 'basket',
        'payment_tokens' => 'paymentTokens',
        'notification_information' => 'notificationInformation',
        'recurring_payment_data' => 'recurringPaymentData',
        'miscellaneous' => 'miscellaneous'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'basket' => 'setBasket',
        'payment_tokens' => 'setPaymentTokens',
        'notification_information' => 'setNotificationInformation',
        'recurring_payment_data' => 'setRecurringPaymentData',
        'miscellaneous' => 'setMiscellaneous'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'basket' => 'getBasket',
        'payment_tokens' => 'getPaymentTokens',
        'notification_information' => 'getNotificationInformation',
        'recurring_payment_data' => 'getRecurringPaymentData',
        'miscellaneous' => 'getMiscellaneous'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['basket'] = $data['basket'] ?? null;
        $this->container['payment_tokens'] = $data['payment_tokens'] ?? null;
        $this->container['notification_information'] = $data['notification_information'] ?? null;
        $this->container['recurring_payment_data'] = $data['recurring_payment_data'] ?? null;
        $this->container['miscellaneous'] = $data['miscellaneous'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets basket
     *
     * @return \VodaPayGatewayClient\Model\PaymentIntentBasketModel|null
     */
    public function getBasket()
    {
        return $this->container['basket'];
    }

    /**
     * Sets basket
     *
     * @param \VodaPayGatewayClient\Model\PaymentIntentBasketModel|null $basket basket
     *
     * @return self
     */
    public function setBasket($basket)
    {
        $this->container['basket'] = $basket;

        return $this;
    }

    /**
     * Gets payment_tokens
     *
     * @return \VodaPayGatewayClient\Model\PaymentTokenDataModel[]|null
     */
    public function getPaymentTokens()
    {
        return $this->container['payment_tokens'];
    }

    /**
     * Sets payment_tokens
     *
     * @param \VodaPayGatewayClient\Model\PaymentTokenDataModel[]|null $payment_tokens payment_tokens
     *
     * @return self
     */
    public function setPaymentTokens($payment_tokens)
    {
        $this->container['payment_tokens'] = $payment_tokens;

        return $this;
    }

    /**
     * Gets notification_information
     *
     * @return \VodaPayGatewayClient\Model\PaymentNotificationDataModel|null
     */
    public function getNotificationInformation()
    {
        return $this->container['notification_information'];
    }

    /**
     * Sets notification_information
     *
     * @param \VodaPayGatewayClient\Model\PaymentNotificationDataModel|null $notification_information notification_information
     *
     * @return self
     */
    public function setNotificationInformation($notification_information)
    {
        $this->container['notification_information'] = $notification_information;

        return $this;
    }

    /**
     * Gets recurring_payment_data
     *
     * @return \VodaPayGatewayClient\Model\PaymentRecurringDataModel|null
     */
    public function getRecurringPaymentData()
    {
        return $this->container['recurring_payment_data'];
    }

    /**
     * Sets recurring_payment_data
     *
     * @param \VodaPayGatewayClient\Model\PaymentRecurringDataModel|null $recurring_payment_data recurring_payment_data
     *
     * @return self
     */
    public function setRecurringPaymentData($recurring_payment_data)
    {
        $this->container['recurring_payment_data'] = $recurring_payment_data;

        return $this;
    }

    /**
     * Gets miscellaneous
     *
     * @return string|null
     */
    public function getMiscellaneous()
    {
        return $this->container['miscellaneous'];
    }

    /**
     * Sets miscellaneous
     *
     * @param string|null $miscellaneous miscellaneous
     *
     * @return self
     */
    public function setMiscellaneous($miscellaneous)
    {
        $this->container['miscellaneous'] = $miscellaneous;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


